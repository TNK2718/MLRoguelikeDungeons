[INST] <<SYS>> """
You are a professional game planner. You are to create a pseudo code that expresses a skill in a turn-based roguelike game.
"""

Here's examples of skills expressed in json format.

Example 1:
{
    "description": "Over 5 turns, Continously perform a flame punch to damage and knock back an enemy in front of myself. If my status "hp" is above the half, increase my strength. If enemy dies, summon a fire orb in front of myself. It keeps chasing enemy in front range and explodes on contact. It also explodes on death.",
    "name": "Blazing Fists",
    "code": "
    for (5 turns) {
        target = select(enemy, in_front);
        attack(target); // Perform flame punches to damage
        move(target, away); // Knock back enemy
        if (hp >= 50%) {
            apply(self, strength_buff, 5 turns);
        }
        if (enemy_dead) {
            create(in_front, fire_orb(() -> {
                for (7 turns) {
                    if (exist(anything, adjacent)) {
                        explode(); // Explode on contact with anything
                    }

                    move(self, select(enemy, in_front)); // Fire orb chases enemy in front range

                    if (self_dead) {
                        explode(); // Explode on death
                    }
                }
            })); // Create fire orb that chases the enemy and explode on contact and its death for summoning duration
        }
    }
    ",
}
Note that lambda function in the argument of create(${position}, ${lambda function}) is used to describe mechanics of the created object. 

Example 2:
{
    "description": "Continously move forward over 3 turns, burning all enemies around me with a burst of magical fire on each step, dealing moderate damage and debuff of burning. If my "hp" is above 50%, delivers a critical hit that increases the damage by 15% and reduces target's defense and grant a shield that absorbs damage.",
    "name": "Magical Flame Fast Forward",
    "code": "
    for (3 turns) {
        move(self, forward); // move forward
        targets = select_all(enemy, adjacent); // AoE
        attack(targets); // Perform magic fire burst to deal AoE damage
        apply(targets, burning, 4 turns); // give enemies burning effect
        if (hp >= 50%) {
            attack(targets); // Delivers a critical hit that increases the damage by 15%
            apply(targets, defense_debuff, 2 turns); // Reduces target's defense
            apply(self, shield_buff, 2 turns); // Grant a shield that absorbs damage.",
        }
    }
    ",
}

Example 3:
{
    "description": "Swap positions with an enemy within front range, absorb enemy's hp and inflict confusion. If successful, gain the same amount of mana as much as moderate percentage of target's maximum mana for a short duration.",
    "name": "Mind Shift",
    "code": "
    target = select(enemy, in_front);
    swap(target, self); // Swap positions with an enemy within front range
    attack(target); // Absorb hp: Deal damage
    heal(self, hp, damage_dealt); // Absorb hp: Heal my hp as much as damage dealt to enemy
    apply(target, confusion, 2 turns); // Inflict confusion
    if (successful) {
        apply(self, mana_buff, 2 turns); // Gain mana equal to moderate percentage of target's max mana for a short duration
    }
    ",
}

Example 4:
{
    "description": "Fire a toxic projectile forward. Projectile will go straight. Projectile deals moderate damage and slowing target's movement on hit. If the target is already slowed or stunned, double the damage dealt and increase the player's defense for a short duration.",
    "name": "Toxic Shot",
    "code": "
    shoot_projectile(in_front, toxic_projectile(() -> {
        for (10 turns) {
            // On hit
            if (exist(enemy, in_front) or exist(obstacle, in_front)) {
                target = select(enemy, in_range);
                attack(target); // Deal moderate damage to the target hit by projectile
                if (target.stunned or target.slowed) {
                    attack(target); // Double the damage dealt
                    apply(self, defense_buff, 2 turns); // Increase player's defense for a short duration
                }
                apply(target, slow, 3 turns); //  Slowing target's movement
                destruct(self); // Destruct on hit
            }
            move(self, forward); // Projectile will go straight
        }
    })); // Fire a toxic projectile forward
    ",
}
Note that lambda function in the argument of shoot_projectile(${target}, ${lambda function}) is used to describe mechanics of the projectiles shot.
For projectiles shot, it must contain move function like move(self, ) as ${lambda_functions} to fire projectiles.

Example 5:
{
    "description": "For 5 turns, your trail will leave a toxic residue behind that remains 4 turns and deals damage and poison to enemies who enter it. If successful, also grant temporary boost to magic power for self and allies nearby and attract another enemy around.",
    "name": "Poisonous Path",
    "code": "
    for (5 turns) {
        create(behind, toxic_residue(() -> {
            for (4 turns) {
                targets = select_all(enemy, in_range);
                attack(targets); // Deal damage to enemies who enter the trail
                apply(targets, poison, 2 turns);
                if (successful) {
                    targets_2 = select_all(ally, in_range);
                    apply(targets_2, magic_power_buff, 2 turns); // Grant a temporary boost to magic power for self and allies nearby
                    
                    target_3 = select(enemy, in_range);
                    move(target_3, towards_self); // Attract another enemy into the center of toxic residue
                }
            }
        })); // Create a trail of toxic residue that deals damage to enemies who enter it
    }",
}
<</SYS>>
Create a skill differnt from the examples. On subject to guns.
[/INST]
[
    {
        "name": "