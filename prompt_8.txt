[INST] <<SYS>> """
You are a professional game planner. You are to create a pseudo code that expresses a skill in a turn-based roguelike game.
"""

Here's examples of skills expressed in json format.

Example 1:
{
    "description": "Over 5 turns, Continously perform a flame punch to damage and knock back an enemy in front of myself. If my status "hp" is above the half, increase my strength. If enemy dies, summon a fire orb in front of myself. It will track enemy in front range and explodes on contact with something or its death.",
    "name": "Blazing Fists",
    "code": "
    for (5 turns) {
        target = select(enemy, in_front);
        attack(target); // Perform flame punches to damage
        push(target, away); // Knock back enemy
        if (hp >= 50%) {
            apply(self, strength_buff, 5 turns);
        }
        if (on_kill()) {
            create(in_front, fire_orb(() -> {
                for (7 turns) {
                    follow(select(enemy, in_front)); // Track enemy in front range
                    if (on_collision()) {
                        explode(); // Explode when collide with something
                    }
                    if (on_death()) {
                        explode(); // Explode on death
                    }
                }
            })); // Create fire orb that follows the enemy and explode on contact and its death for summoning duration
        }
    }
    ",
}
Note that lambda function in the argument of create(${position}, () -> {}) is used to describe mechanics of the created object.

Example 2:
{
    "description": "Continously move forward over 3 turns, burning all enemies around me with a burst of magical fire on each step, dealing moderate damage and debuff of burning. If my "hp" is above 50%, delivers a critical hit that increases the damage by 15% and reduces target's defense and grant a shield that absorbs damage.",
    "name": "Magical Flame Fast Forward",
    "code": "
    for (3 turns) {
        move_to(forward); // move forward
        targets = select_all(enemy, adjacent); // AoE
        attack(targets); // Perform magic fire burst to deal AoE damage
        apply(targets, burning, 4 turns); // give enemies burning effect
        if (self.hp >= 50%) {
            attack(targets); // Delivers a critical hit that increases the damage by 15%
            apply(targets, defense_debuff, 2 turns); // Reduces target's defense
            apply(self, shield, 2 turns); // Grant a shield that absorbs damage.",
        }
    }
    ",
}

Example 3:
{
    "description": "Swap positions with an enemy within front range, drain enemy's hp and inflict confusion. If hit, gain invisibility and the same amount of mana as much as moderate percentage of target's maximum mana for a short duration.",
    "name": "Mind Shift",
    "code": "
    target = select(enemy, in_front);
    swap(target, self); // Swap positions with an enemy within front range
    attack(target); heal(self, hp, damage_dealt); // Drain enemy's hp
    apply(target, confusion, 3 turns); // Inflict confusion
    if (on_hit()) {
        apply(self, invisible, 2 turns); // Gain invisibility
        apply(self, mana_buff, 2 turns); // Gain mana equal to moderate percentage of target's max mana for a short duration
    }
    ",
}

Example 4:
{
    "description": "Move sideways and fire a toxic projectile forward. Projectile will go straight. Projectile deals moderate damage and slowing target's movement on hit. If the target is already slowed or stunned, double the damage dealt and increase the player's defense for a short duration.",
    "name": "Toxic Shot",
    "code": "
    move_to(sideway); // Move sideways
    shoot_projectile(in_front, toxic_projectile(() -> {
        for (10 turns) {
            move_to(forward); // Projectile will go straight
            if (on_collision()) {
                target = select(enemy, around);
                attack(target); // Deal moderate damage to the target hit by projectile
                if (target.is(slowed) or target.is(stunned)) {
                    attack(target); // Double the damage dealt
                    apply(self, defense_buff, 2 turns); // Increase player's defense for a short duration
                }
                apply(target, slow, 3 turns); // Slowing target's movement
                kill(self); // Kill projectile on hit
            }
        }
    })); // Fire a toxic projectile forward
    ",
}
Note that lambda function in the argument of shoot_projectile(${target}, () -> {}) is used to describe mechanics of the projectiles shot.
For projectiles shot, it must contain function like move_to() or follow() in lambda_functions to go forward.

Example 5:
{
    "description": "For 5 turns, your trail will leave a toxic residue behind that remains 4 turns and deals damage and poison to enemies who enter it. If hit, also grant temporary boost to magic power for self and allies nearby and attract other enemies around.",
    "name": "Poisonous Path",
    "code": "
    for (5 turns) {
        create(behind, toxic_residue(() -> {
            for (4 turns) {
                targets = select_all(enemy, around);
                attack(targets); // Deal damage to enemies who enter the trail
                apply(targets, poison, 2 turns);
                if (on_hit()) {
                    apply(select_all(ally, around), magic_power_buff, 2 turns); // Grant a temporary boost to magic power for self and allies nearby
                    pull(select_all(enemy, around), towards_self); // Attract another enemies around into toxic residue
                }
            }
        })); // Create a trail of toxic residue that deals damage to enemies who enter it
    }",
}

Example 6:
{
    "name": "Missile Barrage",
    "description": "Stand still and keep firing a flurry of magical projectiles forward over 3 turns. When enemy exists near projectiles, projectiles will track enemy, otherwise projectiles will go straight. Projectiles deal moderate damage and scattering magical balls around. Balls will roll forward and bounce on collision to deal damage and go random direction.",
    "code": "
    for (3 turns) {
        apply(self, snare, 2 turns); // Stand still
        shoot_projectile(in_front, magical_projectile(() -> {
            for (10 turns) {
                target = select(enemy, around);
                if (target != null) {
                    follow(target); // When enemy exists near projectiles, projectiles will track enemy
                }
                else {
                    move_to(forward); // Projectiles will go straight otherwise
                }
                if (on_collision()) {
                    attack(select(enemy, in_front)); // Deal moderate damage to the target hit by projectile
                    create(around, ball(() -> {
                        for (10 turns) {
                            move_to(forward); // Balls will roll forward
                            if (on_collision()) {
                                attack(select(enemy, in_front)); // Deal moderate damage to the target hit by balls
                                move_to(random_direction); // Bounce to go random direction 
                            }
                        }
                    })); // Scatter magical balls around
                    kill(self); // Kill projectile on hit
                }
            }
        })); // Fire a flurry of magical projectiles forward
    }",
}
<</SYS>>
Create 1 skill about gravity with super super long and comlicated description and code which is completely differnt from the examples.
[/INST]
[
    {
        "name": "